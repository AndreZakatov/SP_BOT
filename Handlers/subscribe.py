import os
import datetime
import time

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery

from Utils.sp_database import Database
from Keyboards.user_kb import user_choice_sum

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
current_directory = os.getcwd()

# –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
relative_path = 'Utils/sp_database.db'
db_path = os.path.join(current_directory, relative_path)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = Database(db_path)


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
now = datetime.datetime.now()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã datetime.date –¥–ª—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
date_start = now.date()
date_end = now.date() + datetime.timedelta(days=1)

class Pay_cnt(StatesGroup):
    cnt = State()


async def process_payment(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id,
                           text='–í—ã–±–µ—Ä–µ—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=user_choice_sum())


async def process_add_5000(message: Message, bot: Bot):
    try:
        if not db.check_subscribed(telegram_id=message.from_user.id):
            await bot.send_message(message.from_user.id,
                                   text='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 5000 —Ä—É–±–ª–µ–π\n\n'
                                        '–í–Ω–æ—à—É –¥–∞–Ω–Ω—ã–µ üïë')
            db.add_user_in_subscriptions(user_id=message.from_user.id,
                                         status='True',
                                         date_start=date_start,
                                         date_end=date_end,
                                         balance=5000)
            time.sleep(3)
            await bot.send_message(message.from_user.id,
                                   text='–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã\n\n'
                                        '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /parsing')
    except Exception as e:
        print(f'{e}')
        await bot.send_message(message.from_user.id,
                               text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


async def process_add_10000(message: Message, bot: Bot):
    try:
        if not db.check_subscribed(telegram_id=message.from_user.id):
            await bot.send_message(message.from_user.id,
                                   text='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 10000 —Ä—É–±–ª–µ–π\n\n'
                                        '–í–Ω–æ—à—É –¥–∞–Ω–Ω—ã–µ üïë')
            db.add_user_in_subscriptions(user_id=message.from_user.id,
                                         status='True',
                                         date_start=date_start,
                                         date_end=date_end,
                                         balance=10000)
            time.sleep(3)
            await bot.send_message(message.from_user.id,
                                   text='–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã\n\n'
                                        '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /parsing')
    except Exception as e:
        print(f'{e}')
        await bot.send_message(message.from_user.id,
                               text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')